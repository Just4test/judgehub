AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters: 
  UseCurrentS3Bucket:
    Description: Provide this value to use current S3 bucket.
    Default: None
    Type: String
  JudgeVpcCidrBlock:
    Description: Provide 'x.y' to use 'x.y.0.0/16' run lambda.
    Default: '10.188'
    Type: String
Conditions: 
  CreateStorage: !Equals [ !Ref UseCurrentS3Bucket, None ]

Resources:
  Storage:
    Type: AWS::S3::Bucket
    Condition: CreateStorage 
    DeletionPolicy: Retain
    # DeletionPolicy: !If [CreateStorage, Delete, Retain]
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  SubmitRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      # Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:*
            Resource: !Sub
              - arn:${partition}:s3:::${bucket}/*
              - partition: !Ref AWS::Partition
                bucket: !If [CreateStorage, !Ref Storage, !Ref UseCurrentS3Bucket]
      - PolicyName: judge
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'

  JudgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  JudgeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join ['', [!Ref JudgeVpcCidrBlock, '.0.0/16']]
      EnableDnsSupport: false
      EnableDnsHostnames: false

  JudgeSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JudgeVPC
      CidrBlock: !Join ['', [!Ref JudgeVpcCidrBlock, '.0.0/18']]
      AvailabilityZone: !Select [0, { 'Fn::GetAZs': '' }]

  JudgeSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JudgeVPC
      CidrBlock: !Join ['', [!Ref JudgeVpcCidrBlock, '.64.0/18']]
      AvailabilityZone: !Select [1, { 'Fn::GetAZs': '' }]

  JudgeSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JudgeVPC
      CidrBlock: !Join ['', [!Ref JudgeVpcCidrBlock, '.128.0/18']]
      AvailabilityZone: !Select [2, { 'Fn::GetAZs': '' }]

  JudgeSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JudgeVPC
      CidrBlock: !Join ['', [!Ref JudgeVpcCidrBlock, '.192.0/18']]

  JudgeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Forbid judge lambda to access the Internet
      VpcId: !Ref JudgeVPC
      SecurityGroupEgress: []

  Submit:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/api/submit
      Handler: submit.submit_handle
      Runtime: python3.7
      Timeout: 11
      Role: !GetAtt SubmitRole.Arn
      Environment:
        Variables:
          S3_BUCKET_NAME: !If [CreateStorage, !Ref Storage, !Ref UseCurrentS3Bucket]
          JUDGE_PYTHON3: !Ref JudgePython3
          JUDGE_NODEJS: !Ref JudgeNodeJS
          JUDGE_NODEJS_VER: !Join [',', [!GetAtt JudgeNodeJSVer0.Version, !GetAtt JudgeNodeJSVer1.Version]]
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /api/submit
            Method: post

  JudgePython3:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/tools/judge/python3
      Handler: judge.judge_handler
      Runtime: python3.7
      MemorySize: 2048
      Timeout: 10
      Role: !GetAtt JudgeRole.Arn
      VpcConfig:
        SecurityGroupIds: [!Ref JudgeSecurityGroup]
        SubnetIds: [!Ref JudgeSubnet0, !Ref JudgeSubnet1, !Ref JudgeSubnet2, !Ref JudgeSubnet3]

  JudgeNodeJS:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/tools/judge/nodejs
      Handler: judge.judge_handler
      Runtime: nodejs8.10
      MemorySize: 2048
      Timeout: 10
      Role: !GetAtt JudgeRole.Arn
      VpcConfig:
        SecurityGroupIds: [!Ref JudgeSecurityGroup]
        SubnetIds: [!Ref JudgeSubnet0, !Ref JudgeSubnet1, !Ref JudgeSubnet2, !Ref JudgeSubnet3]

  JudgeNodeJSVer0:
    Type: "AWS::Lambda::Version"
    Properties: 
      FunctionName: !Ref JudgeNodeJS
      Description: "A test version of MyFunction"
  JudgeNodeJSVer1:
    Type: "AWS::Lambda::Version"
    Properties: 
      FunctionName: !Ref JudgeNodeJS
      Description: "B test version of MyFunction"
